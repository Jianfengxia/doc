一、之前推广数据库集中管理方案遇到的问题:
1.多部门协作比较困难，从下而推比较难，研发MySQL统一环境是MySQL5.7,但安装包制作者打包制作软件一键安装包时把数据库打包进程序，并且错误地使用5.5版本，测试也错误地使用5.5版本做测试，导致版本统一这个想法根本没有得到很好的实现。这个比较难解决。
2.推广前期，发现由于研发MySQL统一环境是linux版本，lower_case_table_names默认值是0，也就是数据库表名是区分大小写的。但以前很多旧的项目都是基于windows版MySQL开发的，在windows平台上lower_case_table_names默认值是1，数据库表名是不区分大小写的。所以数据库设计和程序设计时就已经有很多问题。这个可以通过研发MySQL统一环境设置lower_case_table_names=1，使用兼容windows平台的方式解决。这个已解决。
3.推广前期，发现5.5版本默认的sql_mode为空，这导致研发以前开发程序的sql有很多都有质量问题，在mysql5.7版，sql_mode非空，是一种严格的格式，导致旧程序在5.7平台无法跑。这个可以通过妥协，修改mysql5.7版的sql_mode配置为空得以解决。这个已解决。
4.5.7版本的视图支持子查询，5.5版本的视图不支持子查询。5.7迁移到5.5版本有可能会有问题。解决思路:1.尽量不使用子查询，子查询性能本身就比较差。2.导致谁在从5.7迁移到5.5，不是应该5.5迁移到5.7吗？？。这个已解决。
5.集中给运维管理数据库，研发自身的权限太低，没有权限登录服务器，在遇到一些特殊需要时，无法自行修改my.cnf配置文件，也无法查看错误日志。因为当时解决方案是所有库都在一个DB实例里的，这里肯定会有一些数据库耦合性问题，导致不同业务互相影响，解决办法只有通过多实例才可以解决，我们这个方案虽然提供了类似于云数据库这种RDS这种服务，但实际是不RDS，不能实现由用户自行配置my.cnf和查看错误日志，这个比较难解决。根本解决可能还得自己开发一个私有的云RDS。。其他解决办法可能是保证DBA24小时oncall，有需求就帮忙改。
6.结项后数据如何存放问题。这个可以解决，但需要再沟通。
7.数据库各业务有耦合，互相影响，例如数据库名重名(这个解决办法，只能通过命名规范，但命名规范可能影响落地项目的版本升级)，又例如某业务开发过程中有bug，可能会导致线程用满，影响其他所有业务(后来我找到有一个参数可以控制每一个用户的最大线程数，这是后话了)，根本解决办法都是和5是一样的，多实例。这个增加了方案的复杂度，比较难解决。


二、现打算推广的方案:
不做统一管理，只规范安装部署和参数配置，包括研发、测试、实施、运维部门
难点依然在扩部门的协调合作，从下而推不好进行。

