想法:
1.规范化安装
1.1 Linux
使用一键安装shell脚本，达到规范化安装Linux版数据库服务器
1)shell中可以设置变量mysql_version，修改安装的mysql版本(只支持5.7以上版本)，默认5.7.17
2)shell中可以设置变量data_path，修改数据默认存放目录
3)自动规范默认数据库程序和数据存放路径
4)自动规范默认数据库的my.cnf配置

1.2 Windows
使用Windows绿色一键安装包，达到规范化安装Windows版数据库服务器
1)绿色安装包使用的版本是5.7.17
2)绿色安装包的data目录默认和数据库程序同一层目录，由安装者解压安装时决定
3)自动规范默认数据库的my.ini配置
4)此绿色包可以应用于advanced_installer，打包进程序一键安装包，研发体系可以统一使用这个打包，避免太多的版本不一致。

2.规范化配置
如果说上面的安装包或安装脚本不好推广，或者说不好用。
可以退为规范化研发的数据库安装和配置
2.1 规范其只能使用什么版本
2.2 规范和指导其数据库配置，具体如下:
首先大家需要了解，MySQL参数配置如果没有配置，其实均有一套默认设置的，而不同数据库版本的默认设置有可能会修改，这也是我们为什么统一数据库版本的原因之一。以下例子均针对MySQL5.7而论，更多参数说明，请参考官方文档:
https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html


lower_case_table_names=1
 #为了兼容数据库可以Windows和linux通跑，需要设置数据库表名大小写不区分，这个参数也可以解决一些程序自动生成的sql大小写问题。务必在一开始就设置。windows平台可以不设置，因为lower_case_table_names=(Linux默认0，Windows默认1)。
log_timestamps=SYSTEM #不设置的话，错误日志的时间会与实际时间差了8小时，给排查问题造成麻烦。windows和linux都默认设置了这个。
max_connections = 200 #一般不需要配置，使用默认值151已经够用了。这个值如果设得太大，并且程序有bug，会无限创建连接线程，会导致MySQL数据库内存资源耗尽，直接Out Of Memory
slow_query_log = 1 
slow_query_log_file = slow.log
long_query_time = 1
#linux版本我默认开了慢查询日志，会记录执行速度超过1秒的sql，以便用于排查和优化sql，windows版没有设置。
interactive_timeout = 300 #服务器关闭交互式连接前等待活动的秒数
wait_timeout = 300 #服务器关闭非交互式连接前等待活动的秒数
#连接默认是8小时，一般设置300就够了。属于对linux的优化，可以防止程序bug导致的连接数爆满，windows版本我没有此设置，研发可以按需设置。
binlog_format = row
 #二进制日志格式默认采用的是row
log-bin = ${data_path}/mysql/mysql${mysql_port}/logs/mysql-bin #默认二进制日志存放路径
#二进制日志，用于配置主从复制，用于数据库崩溃或操作失误导致的需要不丢数据库完成恢复，或恢复到某一具体时间点。因为日志占用空间很大，需要定期维护，windows版如果没有这种高数据安全性要求，默认没有开启。
innodb_buffer_pool_size = 100M #如果是独立数据库服务器，并且单实例，建议这个值设置为内存总数的50%到80%，例如教育资源中心的数据库为8G内存，innodb_buffer_pool_size可以设置到5G，以极大优化数据库性能。这个参数默认我设得很小，因为在实施项目中，可能会使用数据库多实例，这个值设太高，会导致内存不够用，导致内存溢出，Out Of Memory。
innodb_data_file_path = ibdata1:100M:autoextend #初始化表空间ibdata1时立刻设置100M的磁盘空间，之后空间自动增长，提升数据库性能也可以适当增加这个参数值。这个值不需要修改，除非特殊需要。
innodb_file_per_table = 1 #每张表独立表空间，其实官方默认值也是on，我这里特别写出来，是因为5.5版本默认是off的，采用的是共用系统表空间。
innodb_flush_method = O_DIRECT #此为linux设置，直接写入磁盘，禁止系统cache，windows采用官方配置。因为我使用tpcc测试过4种linux IO调度算法，得出此算法速度最快，没有经过测试的同学切莫修改，因为这个和硬盘和linux操作系统都有关系。不建议自行修改。
sql-mode="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION" #Linux和windows我采用这个，实际上我是希望继续采用官方默认值的，官方的更严格！最终我采取妥协，因为如果用官方模式，我们很多程序的sql要改写(见http://jishu8.cc/2016/12/15/31/)。值得注意5.5版本以前sql_mode默认值都为空！！坑爹！
event_scheduler = 1 #event类似于计划任务，windows安装设置了1，linux shell脚本设置了0。因为智慧校园项目需要开启和使用event
open_files_limit = 65535 #linux才系统设置，属于优化项
server-id =3306 #windows默认和端口一样，linux默认是末位IP数字+端口号的组合，设置这个仅仅在搭建主从复制有用，如需要做复制实验的，可以自行修改。

2.2.3 其他特殊设置指导
max_allowed_packet = 40M #有时候大的插入和更新会受max_allowed_packet 参数限制，导致写入或者更新失败。如需要可以加大，智慧校园项目有适当调整此参数
innodb_flush_log_at_trx_commit = 1
sync_binlog = 1
#这两个值是我们经常所说的双1，只有这种双1设置，才可以保证数据库主从复制数据一致性。教育资源中心数据库有设置。(官方默认值也是双1)
expire_logs_days = 30 #对运维而言，如果需要用到二进制binlog，并且不想过多地维护，可以设置binlog过期时间，binlog只保留最近30天内的。教育资源中心数据库有设置。
skip-name-resolve #禁用DNS解析，在分布式部署时，可以加快应用服务器和数据库服务器的访问速度。在演示平台的人资营销赢家比赛服务器有设置这个优化。

其他优化类的参数由于涉及DBA的一些知识，暂不提供指导。



再次提醒，注意上面的默认值都是我根据公司目前使用状况默认设置在我的一键安装包，使用官方自动的默认值均不是这些。
请参考官方文档:
https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html

